{{- $fullname := include "kafka.fullname" . -}}
{{- $name := include "kafka.name" . -}}
{{- $chart := include "kafka.chart" . -}}
{{- $root := . }}
{{ range .Values.nodes }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}-{{ .id }}
  labels:
    app: {{ $name }}
    chart: {{ $chart }}
    release: {{ $root.Release.Name }}
    heritage: {{ $root.Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ $name }}
      release: {{ $root.Release.Name }}
      server: {{ $fullname }}-{{ .id }}
  template:
    metadata:
      labels:
        app: {{ $name }}
        release: {{ $root.Release.Name }}
        server: {{ $fullname }}-{{ .id }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      {{- if $root.Values.image.pullSecrets }}
      imagePullSecrets:
        - name: {{ $root.Values.image.pullSecrets }}
      {{- end}}
      initContainers:
        - name: change-ulimit
          image: busybox:latest
          command:
            - sh
            - -c
            - "ulimit -n 65536"
        - name: create-directory
          image: busybox:latest
          command:
            - sh
            - -c
            - "mkdir -p /var/data/data"
          volumeMounts:
            - mountPath: /var/data
              subPath: kafka/data
              name: kafka-data
      containers:
        - name: {{ $root.Chart.Name }}
          image: "{{ $root.Values.image.registry }}{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          ports:
            - name: broker
              containerPort: 9092
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
            - name: broker-external
              containerPort: {{ add $root.Values.service.firstExternalBrokerPort .id }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          volumeMounts:
            - mountPath: /var/data
              subPath: kafka/data
              name: kafka-data
            {{- if $root.Values.secrets.password }}
            - mountPath: "/etc/kafka_jaas.conf"
              subPath: jaasconfig
              name: kafka-jaas-config
              readOnly: true
            {{- end}}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KAFKA_BROKER_ID
              value: "{{ .id }}"
            - name: KAFKA_HEAP_OPTS
              value: "{{ $root.Values.environment.jvmFlags }}"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ $root.Values.zookeeper.connect }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://{{ $fullname }}-{{ .id }}:9092{{if .externalName }},EXTERNAL://{{ .externalName }}:{{ add $root.Values.service.firstExternalBrokerPort .id }}{{end}}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,EXTERNAL:PLAINTEXT"
            - name: KAFKA_NUM_PARTITIONS
              value: "64"
            - name: KAFKA_DELETE_TOPICS
              value: "true"
            - name: KAFKA_AUTO_CREATE_TOPICS
              value: "true"
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "24"
            - name: KAFKA_TRANSACTION_MAX_TIMEOUT_MS
              value: "60000"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_LOG_DIRS
              value: "/var/data/logs"
            - name: KAFKA_DATA_DIRS
              value: "/var/data/data"
            - name: CONFLUENT_SUPPORT_METRICS_ENABLE
              value: "false"
            {{- if $root.Values.secrets.password }}
            - name: KAFKA_ZOOKEEPER_SET_ACL
              value: "true"
            - name: JAAS_CONFIG_LOCATION
              value: "/etc/kafka_jaas.conf"
            {{- end}}
          resources:
{{ toYaml $root.Values.resources | indent 12 }}
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: {{ $fullname }}-{{ .id }}
        - name: kafka-jaas-config
          secret:
            secretName: {{ $fullname }}-jaas-config
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            {{- if .zone }}
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                  - {{ .zone }}
            {{- end}}
            {{- if .hostname }}
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - {{ .hostname }}
            {{- end}}
{{ end }}
